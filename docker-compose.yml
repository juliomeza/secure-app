# docker-compose.yml
version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persist data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # Use secure passwords!
    ports:
      - "5432:5432" # Expose only if needed for direct access from host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-appdb}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: django_backend
    command: gunicorn --bind 0.0.0.0:8000 project.wsgi:application # Production command
    # To run with SSL for dev (requires certs):
    # command: python manage.py runsslserver 0.0.0.0:8000
    volumes:
      - ./backend:/app # Mount code for development reloading
      # - static_volume:/app/staticfiles # If collecting static files
    ports:
      - "8000:8000" # Expose backend port
      # Use 8443:8000 if using runsslserver and want to access directly via HTTPS
    env_file:
      - .env # Load environment variables
    depends_on:
      db:
        condition: service_healthy # Wait for db to be ready

  frontend:
    build: ./frontend
    container_name: react_frontend
    ports:
      - "5173:80" # Map Nginx port 80 (inside container) to host port 5173
    depends_on:
      - backend # Frontend depends on backend for API calls

volumes:
  postgres_data: # Define the named volume for database persistence
  # static_volume: # Define named volume for static files if needed